from stdlib import append

#----------
# Constants
#----------
WEEKLY_CAR_OWN_COST = 2228/52
# Define data bins and labels.
# Assume no-data entries map to nonpositive numbers.
# Define color scheme using http://colorbrewer2.org/js/.
# Order colors least-to-most intense, but begin with gray,
# the no-data color.
OPACITY = 1
GREY = 'rgb(200, 200, 200)'
COLORS = reversed(['rgb(158,1,66)','rgb(213,62,79)','rgb(244,109,67)','rgb(253,174,97)','rgb(254,224,139)','rgb(230,245,152)','rgb(171,221,164)','rgb(102,194,165)','rgb(50,136,189)','rgb(94,79,162)'])
n = len(COLORS)
COLOR_SCALE =\
  d3.scale.linear()\
  .domain([i/(n-1) for i in range(n)])\
  .clamp(True)\
  .range(COLORS)\
  .interpolate(d3.interpolateHcl)
BINS = [None].concat([i/n for i in range(n)])
LABELS = ['n/a'].concat([(b*100).toFixed(0) + '%' for b in BINS[1:]])

#---------
# Classes
#---------
class State:
    """
    An object that holds the values of the user interface widgets.
    """
    def __init__(self, income, numBedrooms, numBedroomsRent, modes, commuteCosts,
      numWorkdays, parkingCosts, numCars, workAreaNames):
        self.income = income
        self.numBedrooms = numBedrooms
        self.numBedroomsRent = numBedroomsRent
        self.modes = modes
        self.commuteCosts = commuteCosts
        self.numWorkdays = numWorkdays
        self.parkingCosts = parkingCosts
        self.numCars = numCars
        self.workAreaNames = workAreaNames

    def getWeeklyIncome(self):
        return self.income/52

    def getWeeklyCarOwnCost(self):
        return self.numCars*WEEKLY_CAR_OWN_COST

    def getWeeklyParkingCost(self):
        totalCost = 0
        for k in range(2):
            parking = self.parkingCosts[k]
            numWorkdays = self.numWorkdays[k]
            totalCost += parking*numWorkdays
        return totalCost

    def getWeeklyTotalCostFraction(self, weeklyTotalCost):
        """
        Given a weekly total cost, divide it by the current weekly income.
        """
        total = weeklyTotalCost
        if total is not None:
            fraction = total/self.getWeeklyIncome()
        else:
            fraction = None
        return fraction

class AreaData:
    """
    An object that holds data about rent and commute costs for each area.
    Only one instance is needed.
    """
    def __init__(self, rentByNbedroomsByArea, MIndexByArea, M):
        self.rentByNbedroomsByArea = rentByNbedroomsByArea
        # Row/column index in M[mode] by Area name
        self.MIndexByArea = MIndexByArea
        # Daily commute cost matrix by mode:
        self.M = M

    def getWeeklyRent(self, state, areaName):
        """
        Return the weekly rent for the area unit with the given name
        and according to the given UI state.
        If the rent is undefined, return None.
        """
        numBedrooms = state.numBedrooms
        numBedroomsRent = state.numBedroomsRent
        rent = self.rentByNbedroomsByArea[areaName][numBedrooms]
        if rent is not None:
            rent = float(rent)
            rent *= int(numBedroomsRent)/int(numBedrooms)
        else:
            rent = None
        return rent

    def getWeeklyCommuteCostAndTime(self, state, areaName):
        """
        Return the total weekly commute distance and time
        from the given area unit to Y's workplace and P's workplace.
        """
        totalCost = 0
        totalTime = 0
        if state.workAreaNames is None:
            return totalCost, totalTime

        i = self.MIndexByArea[areaName]
        for k in range(2):
            numWorkdays = state.numWorkdays[k]
            if not numWorkdays:
                # Doesn't contribute to total cost and time
                continue
            mode = state.modes[k]
            workareaName = state.workAreaNames[k]
            if workareaName is None:
                # Doesn't contribute to total cost and time
                continue
            j = self.MIndexByArea[workareaName]
            # Remember that M[mode] is a lower-triangular half-matrix
            if j > i:
                i, j = j, i
            cost, time = self.M[mode][i][j]
            if cost is None:
                # Can't get to work from this feature via this mode
                return None, None
            else:
                # Add in value of time
                cost += time*state.commuteCosts[k]
            totalCost += numWorkdays*cost
            totalTime += numWorkdays*time
        return totalCost, totalTime

    def getWeeklyTotalCost(self, state, areaName):
        """
        Return the total cost for living in the given area unit
        according to the given UI state
        """
        rent = self.getWeeklyRent(state, areaName)
        cc = self.getWeeklyCommuteCostAndTime(state, areaName)[0]
        if rent is not None and cc is not None:
            total = rent + cc +\
              state.getWeeklyCarOwnCost() +\
              state.getWeeklyParkingCost()
        else:
            total = None
        return total

    def getAreaStats(self, state, areaName):
        """
        Given a State instance and an area unit name, return a dictionary of
        stats for that area unit with the following keys and values.

        - areaName
        - weeklyIncome
        - weeklyRent
        - weeklyCommuteCost
        - weeklyCommuteTime
        - weeklyParkingCost
        - weeklyCarOwnCost
        - totalCost
        - totalCostFraction
        """
        wcct = self.getWeeklyCommuteCostAndTime(state, areaName)
        wtc = self.getWeeklyTotalCost(state, areaName)
        return {
          'areaName': areaName,
          'weeklyIncome': state.getWeeklyIncome(),
          'weeklyRent': self.getWeeklyRent(state, areaName),
          'numBedrooms': state.numBedrooms,
          'numBedroomsRent': state.numBedroomsRent,
          'weeklyCommuteCost': wcct[0],
          'weeklyCommuteTime': wcct[1],
          'weeklyParkingCost': state.getWeeklyParkingCost(),
          'weeklyCarOwnCost': state.getWeeklyCarOwnCost(),
          'weeklyTotalCost': wtc,
          'weeklyTotalCostFraction': state.getWeeklyTotalCostFraction(wtc),
        }

#-------------------
# Functions
#-------------------
def getState(workAreaNames=None):
    """
    Return a State instance containing the current values of the UI widgets.
    All numerical fields are stored as integers.
    """
    income = $("#income-slider").slider("value")
    numBedrooms = int($('#num-bedrooms').val())
    numBedroomsRent = int($('#num-bedrooms-rent').val())
    modes = [$('#mode-y').val(), $('#mode-p').val()]
    commuteCosts = [$("#commute-cost-y-slider").slider("value"),
      $("#commute-cost-p-slider").slider("value")]
    numWorkdays = [$("#num-workdays-y-slider").slider("value"),
      $("#num-workdays-p-slider").slider("value")]
    parkingCosts = [$("#parking-cost-y-slider").slider("value"),
      $("#parking-cost-p-slider").slider("value")]
    numCars = int($('#num-cars').val())
    return State(income, numBedrooms, numBedroomsRent, modes, commuteCosts, numWorkdays,
      parkingCosts, numCars, workAreaNames)

def numToDollarStr(x, inverse=False):
    # Given a float `x`, round it to the nearest integer,
    # convert it into a string with commas as
    # thousands separators and prepend a dollar sign.
    # If `inverse` is True, then assume `x` has the output format
    # mentioned above, and convert it back to an integer.
    if not inverse:
        if x is None or x is undefined:
            return 'n/a'
        dollars = x.toFixed(0)
        # Insert separating commas
        dollars = dollars.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        return '$' + dollars
    else:
        if x == 'n/a':
            return None
        return int(x.replace('$', '').replace(',',''))

def getTable(feature):
    """
    Given an area unit feature with embedded stats of the form returned by
    ``getAreaStats()``, format the stats in an HTML table, and
    return the result.
    """
    areaName = feature.properties.rental_area
    stats = feature.properties.stats
    # Format quantities
    if stats.weeklyCommuteTime is not None:
        commuteTime = stats.weeklyCommuteTime.toFixed(1) + '&nbsp;h'
    else:
        commuteTime = 'n/a'
    if stats.weeklyRent is not None and\
      stats.weeklyCommuteCost is not None:
        total = stats.weeklyTotalCost
        fraction = stats.weeklyTotalCostFraction
        percent = (fraction*100).toFixed(1) + '%'
    else:
        total = None
        fraction = None
        percent = 'n/a'
    table = '<h4>' + stats.areaName + '</h4>' +\
        '<table>' +\
        '<tr><td>Income per week</td><td>' +\
        numToDollarStr(stats.weeklyIncome) + '</td>' +\
        '<tr><td>Rent per week (' + stats.numBedroomsRent +\
        ' of ' + stats.numBedrooms + ' bd)</td><td>' +\
        numToDollarStr(stats.weeklyRent) + '</td></tr>' +\
        '<tr><td>Commute cost per week</td><td>' +\
        numToDollarStr(stats.weeklyCommuteCost) + '</td></tr>' +\
        '<tr><td>Commute time per week</td><td>' +\
        commuteTime + '</td></tr>' +\
        '<tr><td>Parking cost per week</td><td>' +\
        numToDollarStr(stats.weeklyParkingCost) +\
        '</td></tr>' +\
        '<tr><td>Car cost per week</td><td>' +\
        numToDollarStr(stats.weeklyCarOwnCost) + '</td></tr>' +\
        '<tr><td>Total cost per week</td><td>' +\
        numToDollarStr(total) +\
        '</td></tr>' +\
        '<tr><td>% of weekly income</td><td>' +\
        percent +\
        '</td></tr>' +\
        '</table>'

    return table

def rgbaToHex(s):
    s, a = s[:-1], s[-1]
    result = '#'
    for x in s:
        h = Math.round(a*x + 255*(1 - a)).toString(16)
        if len(h) < 2:
            h = '0' + h
        result += h
    return result

def makeUI(lon, lat, maxBounds, markerLatLons, medianNetIncome, zoom,
  areas, areaData):
    # Initialize state to avoid race conditions
    state = State(
        medianNetIncome,  # income
        3,  # numBedrooms
        1,  # numBedroomsRent
        ['bicycling', 'walking'],  # modes
        [0, 0],  # commuteCosts
        [5, 0],  # numWorkdays
        [0, 0],  # parkingCosts
        0,  # numCars
        None  # workAreaNames
    )

    # Add income slider widget
    $(def():
        $( "#income-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 100,
            'max': 200000,
            'value': state.income,
            'step': 100,
            'slide': def(event, ui):
                # Update income display
                $('#income').val(numToDollarStr(ui.value))
            ,
            'stop': def(event, ui):
                # Update area unit
                state = getState(getWorkAreaNames(workMarkers))
                updateAreas(state)
        })
        # Initialize slider
        sv = $('#income-slider')
        $('#income').val(numToDollarStr(sv.slider('value')))
        # # Label the median annual income point on slider
        # min = sv.slider( "option", "min" )
        # range = sv.slider( "option", "max" ) - min
        # el = $('<label>&#9650;</label><br>').css('left',
        #     (medianNetIncome/range*100) +'%')
        # $("#income-slider").append(el)
    )

    def adjustNumBedroomsRent():
        nb = $('#num-bedrooms').val()
        # Block and possibly reset the appropriate
        # number of bedrooms to rent
        group = $('#num-bedrooms-rent')
        nbr = group.val()
        if nbr > nb:
            nbr = nb
            group.val(nb)
        for x in range(1, 6):
            item = $('#num-bedrooms-rent li[value=' + x + ']')
            if x == nbr:
                item.addClass('ui-selected')
            if x <= nb:
                item.removeClass('blocked')
            else:
                item.removeClass('ui-selected')
                item.addClass('blocked')
            group.selectable({
                cancel: '.blocked'
            })

    # Add number-of-bedrooms selector widget
    $(def():
        $("#num-bedrooms").selectable({
            'selected': def(event, ui):
                # Update number of bedrooms
                $('#num-bedrooms').val(ui.selected.value)
                # Adjust number of bedrooms to rent accordingly
                adjustNumBedroomsRent()
                # Update area units
                state = getState(getWorkAreaNames(workMarkers))
                updateAreas(state)
        })
    )
    # Initialize selector
    item = $('#num-bedrooms li[value=' + state.numBedrooms + ']')
    item.addClass('ui-selected')
    $('#num-bedrooms').val(state.numBedrooms)
    adjustNumBedroomsRent()

    # Add number-of-bedrooms-to-rent selector widget
    $(def():
        $("#num-bedrooms-rent").selectable({
            'selected': def(event, ui):
                # Update nuber of bedrooms
                $('#num-bedrooms-rent').val(ui.selected.value)
                # Update area units
                state = getState(getWorkAreaNames(workMarkers))
                updateAreas(state)
        })
    )
    # Initialize selector
    item = $('#num-bedrooms-rent li[value=' + state.numBedroomsRent + ']')
    item.addClass('ui-selected')
    $('#num-bedrooms-rent').val(state.numBedroomsRent)

    # Add mode selector widgets
    $(def():
        $("#mode-y").selectable({
            'selected': def(event, ui):
                # Update nuber of bedrooms
                $('#mode-y').val(ui.selected.id)
                mode = $('#mode-y').val()
                if mode != 'driving':
                    # Zero parking cost
                    $('#parking-cost-y').val('$0')
                    $('#parking-cost-y-slider').slider('value', 0)
                else:
                    # Set car ownership to 1 car if it's 0
                    item = $('#num-cars li.ui-selected')
                    if item.val() == 0:
                        item.removeClass('ui-selected')
                        $('#num-cars li:eq(1)').addClass('ui-selected')
                        $('#num-cars').val(1)
                numWorkdays = int($('#num-workdays-y').val())
                if numWorkdays:
                    # Update area units
                    state = getState(getWorkAreaNames(workMarkers))
                    updateAreas(state)
        })
    )
    # Initialize selector
    item = $('#mode-y li[id=' + state.modes[0] + ']')
    item.addClass('ui-selected')
    $('#mode-y').val(state.modes[0])

    $(def():
        $("#mode-p").selectable({
            'selected': def(event, ui):
                # Update nuber of bedrooms
                $('#mode-p').val(ui.selected.id)
                mode = $('#mode-p').val()
                if mode != 'driving':
                    # Zero parking cost
                    $('#parking-cost-p').val('$0')
                    $('#parking-cost-p-slider').slider('value', 0)
                else:
                    # Set car ownership to 1 car if it's 0
                    item = $('#num-cars li.ui-selected')
                    if item.val() == 0:
                        item.removeClass('ui-selected')
                        $('#num-cars li:eq(1)').addClass('ui-selected')
                        $('#num-cars').val(1)
                numWorkdays = int($('#num-workdays-p').val())
                if numWorkdays:
                    # Update area units
                    state = getState(getWorkAreaNames(workMarkers))
                    updateAreas(state)
        })
    )
    # Initialize selector
    item = $('#mode-p li[id=' + state.modes[1] + ']')
    item.addClass('ui-selected')
    $('#mode-p').val(state.modes[1].id)

    # Add commute cost slider widgets
    $(def():
        $( "#commute-cost-y-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 0,
            'max': 60,
            'value': state.commuteCosts[0],
            'step': 1,
            'slide': def(event, ui):
                # Update income display
                $('#commute-cost-y').val(numToDollarStr(ui.value))
            ,
            'stop': def(event, ui):
                numWorkdays = int($('#num-workdays-y').val())
                if numWorkdays:
                    # Update area units
                    state = getState(getWorkAreaNames(workMarkers))
                    updateAreas(state)
        })
        # Initialize slider
        s = $('#commute-cost-y-slider')
        $('#commute-cost-y').val(numToDollarStr(s.slider('value')))
    )

    $(def():
        $( "#commute-cost-p-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 0,
            'max': 60,
            'value': state.commuteCosts[1],
            'step': 1,
            'slide': def(event, ui):
                # Update income display
                $('#commute-cost-p').val(numToDollarStr(ui.value))
            ,
            'stop': def(event, ui):
                numWorkdays = int($('#num-workdays-p').val())
                if numWorkdays:
                    # Update area units
                    state = getState(getWorkAreaNames(workMarkers))
                    updateAreas(state)
        })
        # Initialize slider
        s = $('#commute-cost-p-slider')
        $('#commute-cost-p').val(numToDollarStr(s.slider('value')))
    )

    # Add number-of-workdays sliders
    $(def():
        $( "#num-workdays-y-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 0,
            'max': 7,
            'value': state.numWorkdays[0],
            'step': 1,
            'slide': def(event, ui):
                # Update income display
                $('#num-workdays-y').val(ui.value)
            ,
            'stop': def(event, ui):
                # Update area units
                state = getState(getWorkAreaNames(workMarkers))
                updateAreas(state)
        })
        # Initialize slider
        s = $('#num-workdays-y-slider')
        $('#num-workdays-y').val(s.slider('value'))
    )

    $(def():
        $( "#num-workdays-p-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 0,
            'max': 7,
            'value': state.numWorkdays[1],
            'step': 1,
            'slide': def(event, ui):
                # Update income display
                $('#num-workdays-p').val(ui.value)
            ,
            'stop': def(event, ui):
                # Update area units
                state = getState(getWorkAreaNames(workMarkers))
                updateAreas(state)
        })
        # Initialize slider
        s = $('#num-workdays-p-slider')
        $('#num-workdays-p').val(s.slider('value'))
    )

    # Add parking cost slider widgets
    $(def():
        $( "#parking-cost-y-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 0,
            'max': 30,
            'value': state.parkingCosts[0],
            'step': 1,
            'slide': def(event, ui):
                # Update income display
                $('#parking-cost-y').val(numToDollarStr(ui.value))
            ,
            'stop': def(event, ui):
                numWorkdays = int($('#num-workdays-y').val())
                if numWorkdays:
                    # Update area units
                    state = getState(getWorkAreaNames(workMarkers))
                    updateAreas(state)
        })
        # Initialize slider
        s = $('#parking-cost-y-slider')
        $('#parking-cost-y').val(numToDollarStr(s.slider('value')))
    )

    $(def():
        $( "#parking-cost-p-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 0,
            'max': 30,
            'value': state.parkingCosts[1],
            'step': 1,
            'slide': def(event, ui):
                # Update income display
                $('#parking-cost-p').val(numToDollarStr(ui.value))
            ,
            'stop': def(event, ui):
                numWorkdays = int($('#num-workdays-p').val())
                if numWorkdays:
                    # Update area units
                    state = getState(getWorkAreaNames(workMarkers))
                    updateAreas(state)
        })
        # Initialize slider
        s = $('#parking-cost-p-slider')
        $('#parking-cost-p').val(numToDollarStr(s.slider('value')))
    )

    # Add number-of-cars select widget
    $(def():
        $("#num-cars").selectable({
            'selected': def(event, ui):
                # Update nuber of bedrooms
                $('#num-cars').val(ui.selected.value)
                # Update area units
                state = getState(getWorkAreaNames(workMarkers))
                updateAreas(state)
        })
    )
    # Initialize selector
    item = $('#num-cars li[value=' + state.numCars + ']')
    item.addClass('ui-selected')
    $('#num-cars').val(state.numCars)

    # Make map
    map = L.map('map', {
        'center': [lat, lon],
        'zoom': zoom,
        'minZoom': 8,
        'maxZoom': 13,
        'maxBounds': maxBounds,
    })
    #tiles = 'http://{s}.tiles.mapbox.com/v3/key/{z}/{x}/{y}.png'
    # Define map base layers, one of which can be selected at a time
    #L.tileLayer(tiles).addTo(map)

    # Disable zoom-by-scroll
    # map.scrollWheelZoom.disable()

    # Remove 'Leaflet' link from corner of map
    map.attributionControl.setPrefix('')

    # Add a legend to the map
    legend = L.control({'position': 'bottomleft'})
    legend.onAdd = def(map):
        div = L.DomUtil.create('div', 'legend')
        content = '<h4>Cost as % of income</h4>'
        n = len(BINS)
        # Render
        for i in range(n):
            content += '<span class="color" style="background:' +\
              getColor(BINS[n - i - 1]) +\
              '"></span><span>' + LABELS[n - i - 1] + '</span><br/>'
        div.innerHTML = content
        return div

    legend.addTo(map)

    # Add a scale display to the map
    L.control.scale({'imperial': False, 'position': 'topleft'}).addTo(map);

    # Add a info box to the map
    info = L.control({position: 'bottomright'})
    info.onAdd = def():
        div = L.DomUtil.create('div', 'info-box')
        return div
    info.addTo(map)

    def updateInfo(feature=None):
        if feature is not None:
            table = getTable(feature)
        else:
            table = '<h4>Info box</h4>Hover over an area'
        # Update the control based on feature properties passed
        div = $('.info-box.leaflet-control').get(0)
        div.innerHTML = table

    updateInfo()

    # Create workplace markers
    workMarkers = []
    for k in range(2):
        if k == 0:
            title = 'Your work'
            symbol = 'y'
            url = 'images/work_marker_y.png'
        else:
            title = "Your partner's work"
            symbol = 'p'
            url = 'images/work_marker_p.png'
        customIcon = L.icon({
          "iconUrl": url,
          "iconSize": [30, 70],
          "iconAnchor": [15, 35],
          "popupAnchor": [0, -35],
          })
        marker = L.marker(markerLatLons[k], {
          'draggable': True,
          'title': title,
          'icon': customIcon,
          })
        # # If you have Mapbox and a web connection,
        # # use this code for defining the markers:
        # if k == 0:
        #     title = 'Your work'
        #     symbol = 'y'
        # else:
        #     title = "Your partner's work"
        #     symbol = 'p'
        # marker = L.marker(markerLatLons[k], {
        #   'draggable': True,
        #   'title': title,
        #   'icon': L.mapbox.marker.icon({
        #     'marker-color': '#D53E4F',
        #     'marker-symbol': symbol,
        #     })
        #   })
        workMarkers.append(marker)
    for m in workMarkers:
        m.addTo(map)

    # Set marker drag behavior
    for marker in workMarkers:
        marker.bindPopup('<h4>' + marker.options.title + '</h4>Undefined')
        marker.on('drag', def(e):
            # In marker popup display the name of the area unit
            # being hovered over
            setWorkPopup(this)
        )
        marker.on('dragend', def(e):
            # Recolor areas
            state = getState(getWorkAreaNames(workMarkers))
            updateAreas(state)
        )

    def getAreaName(marker):
        """
        Return the name of the area that the given marker lies in.
        """
        latLon = marker.getLatLng()
        try:
            layer = leafletPip.pointInLayer(latLon, areas, True)[0]
        except:
            return None
        if layer:
            areaName = layer.feature.properties.rental_area
        else:
            areaName = None
        return areaName

    def getWorkAreaNames(workMarkers=None):
        if workMarkers is not None:
            result = [getAreaName(m) for m in workMarkers]
        else:
            result = None
        return result

    def setWorkPopup(marker):
        """
        Set the content of the given marker's popup,
        and open the popup.
        """
        areaName = getAreaName(marker)
        text = '<h4>' + marker.options.title + '</h4>'
        if areaName:
            text += areaName
        else:
            text += 'Undefined'
        marker.setPopupContent(text)
        marker.openPopup()

    # Feature style functions
    def getColor(x):
        if x is None:
            return GREY
        else:
            return COLOR_SCALE(x)
        # for (i, grade) in enumerate(BINS):
        #     if x <= grade:
        #         return COLORS[i]
        # return COLORS[0]

    def areaStyle(feature):
        c = getColor(feature.properties.stats.weeklyTotalCostFraction)
        return {
          'fillColor': c,
          'fillOpacity': 1,
          'color': 'black',
          'weight': 0.5,
          'opacity': 1,
        }

    def highlightFeature(e):
        layer = e.target
        layer.setStyle({
          'weight': 2,
        })
        if not L.Browser.ie and not L.Browser.opera:
            layer.bringToFront()
        updateInfo(layer.feature)

    def resetHighlight(e):
        layer = e.target
        layer.setStyle({'weight': 0.5})
        layer._map.closePopup()
        updateInfo()

    def zoomToFeature(e):
        map.fitBounds(e.target.getBounds())

    def onEachFeature(feature, layer):
        layer.on({
            'mouseout': resetHighlight,
            'click': highlightFeature, #zoomToFeature,
            'mouseover': highlightFeature,
        })

    # Add area units to map
    areas = L.geoJson(areas, {
      'onEachFeature': onEachFeature,
    }).addTo(map)

    def updateAreas(state):
        areas.eachLayer(def(layer):
            areaName = layer.feature.properties.rental_area
            stats = areaData.getAreaStats(state, areaName)
            layer.feature.properties.stats = stats
            layer.setStyle(areaStyle(layer.feature))
        )

    updateAreas(state)

def main():
    # Get data embedded in webpage
    data = $.parseJSON($('#data').html())
    lon = data['lon']
    lat = data['lat']
    maxBounds = data['maxBounds']
    markerLatLons = data['markerLatLons']
    medianNetIncome = data['medianNetIncome']
    zoom = data['zoom']

    # Get data from server and then make the UI
    spinner = new Spinner().spin($("#map").get(0))
    $.when(
        $.getJSON(data['areasFile']),
        $.getJSON(data['rentsFile']),
        $.getJSON(data['commuteCostsFile'])
    ).done(def(a, b, c):
        # Area units geodata
        areas = a[0]
        areaData = AreaData(b[0], c[0]['index_by_name'], c[0]['matrix'])
        spinner.stop()
        makeUI(lon, lat, maxBounds, markerLatLons, medianNetIncome, zoom,
          areas, areaData)
    )

main()
